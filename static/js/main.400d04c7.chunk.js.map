{"version":3,"sources":["serviceWorker.js","redux/reducers.js","redux/configureStore.js","redux/constants.redux.js","components/ErrorBoundaryComponent.js","components/functional-components/SearchComponent.js","components/functional-components/CardComponent.js","components/functional-components/ScrollComponent.js","components/functional-components/HeaderComponent.js","components/MainComponent.js","redux/actions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","search","initialStateforRobots","robots","isPending","error","logger","createLogger","rootReducer","combineReducers","searchARobot","state","arguments","length","undefined","action","type","Object","assign","payload","requestRobotsReducer","ErrorBoundary","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasErr","info","setState","react_default","a","createElement","className","children","Component","Search","_ref","searchChange","for","id","name","placeholder","onChange","Card","map","robot","key","alt","src","concat","slice","email","username","style","margin","Scroll","Header","title","Main","loading","onRequestRobots","_this$state","_this$props","onSearchChange","filterRobots","filter","toLowerCase","includes","HeaderComponent","ErrorBoundaryComponent","SearchComponent","ScrollComponent","CardComponent","connect","dispatch","event","target","value","dispath","fetch","then","response","json","data","catch","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","MainComponent","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.400d04c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    changeSearchField,\r\n    requestRobots_Pending,\r\n    requestRobots_Success,\r\n    requestRobots_Failed\r\n } from './constants.redux';\r\n\r\nexport const initialState = {\r\n    search: \"\",\r\n};\r\n\r\nexport const searchARobot = (state = initialState, action= {}) => {\r\n    switch(action.type) {\r\n        case changeSearchField:\r\n            return Object.assign({}, state, {search: action.payload});\r\n            // or return { ...state, search: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initialStateforRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    error: ''\r\n};\r\n\r\nexport const requestRobotsReducer = (state = initialStateforRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case requestRobots_Pending:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case requestRobots_Success:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case requestRobots_Failed:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { searchARobot, requestRobotsReducer } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchARobot, requestRobotsReducer });\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        rootReducer, // our root reducer\r\n        applyMiddleware(logger, thunkMiddleware)\r\n    );\r\n\r\n    return store;\r\n};","export const changeSearchField = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const requestRobots_Pending = 'REQUEST_ROBOTS_PENDING';\r\nexport const requestRobots_Success = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const requestRobots_Failed = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasErr: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        // console.log(`error here ${error}`);\r\n        // console.log(`info here ${info}`);\r\n        this.setState({ hasErr: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasErr) {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"tc f1 lh-copy\">Ooops. That didn't work.</h1>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nimport '../../component-styles/SearchComponentStyle.css';\r\n\r\nconst Search = ({ searchChange }) => {\r\n\r\n    return (\r\n        <div className=\"tc pa2\">\r\n            <label for=\"searchrobot\" id=\"searchrobotlabel\">SearchRobot</label>\r\n            <input \r\n                className=\"pa3 mb4 br-pill ba b--light-green bg-washed-green\" \r\n                type=\"search\"\r\n                id=\"searchrobot\"\r\n                name=\"searchrobot\" \r\n                placeholder=\"search a cool robot\" \r\n                onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nconst Card = props => {\r\n  const robots = props.robots.map(robot => {\r\n    return (\r\n      <div\r\n        key={robot.id}\r\n        className=\"bg-washed-green dib br3 pa2 mv3 mh2 grow bw1 shadow-5 bg-animate hover-bg-light-green\"\r\n      >\r\n        <img\r\n          className=\"w-100\"\r\n          alt={robot.name}\r\n          src={`https://robohash.org/${robot.id}?200x200`}\r\n        />\r\n        <div>\r\n          <h2>{robot.name.slice(0, 20)}</h2>\r\n          <p>{robot.email}</p>\r\n          <p>\r\n            <b>{robot.username}</b>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"w-90 tc\" style={{ margin: \"0 auto\" }}>\r\n      {robots}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport '../../component-styles/ScrollComponentStyle.css';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n// Scroll will use children that is 3rd feature in list of props and state\r\n\r\n    return (\r\n        <div className=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst Header = props => {\r\n  if (props.isPending) {\r\n    return <h1 className=\"tc f-subheadline lh-copy\">{props.title}</h1>;\r\n  } else {\r\n    return <h1 className=\"tc f2 lh-copy\">{props.title}</h1>;\r\n  }\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setSearchField, requestRobots } from \"../redux/actions\";\r\n\r\nimport \"../component-styles/MainComponentStyle.css\";\r\n\r\nimport ErrorBoundary from \"./ErrorBoundaryComponent\";\r\nimport Search from \"./functional-components/SearchComponent\";\r\nimport Card from \"./functional-components/CardComponent\";\r\nimport Scroll from \"./functional-components/ScrollComponent\";\r\nimport Header from \"./functional-components/HeaderComponent\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    search: state.searchARobot.search,\r\n    robots: state.requestRobotsReducer.robots,\r\n    isPending: state.requestRobotsReducer.isPending,\r\n    error: state.requestRobotsReducer.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      title: \"Welcome to RoboFriends\",\r\n      loading: \"Waiting for all the cool robots to come here....\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n\r\n  render() {\r\n    const { loading, title } = this.state;\r\n\r\n    const { robots, search, onSearchChange, isPending } = this.props;\r\n\r\n    const filterRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(search.toLowerCase());\r\n    });\r\n\r\n    if (isPending) {\r\n      return (\r\n        <div className=\"pa2\">\r\n          <Header isPending={isPending} title={title} />\r\n          <h1 className=\"tc f3 mt6 pa4\">{loading}</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"pa2\">\r\n          <ErrorBoundary>\r\n            <Header isPending={isPending} title={title} />\r\n            <Search searchChange={onSearchChange} />\r\n            <Scroll>\r\n              <Card robots={filterRobots} />\r\n            </Scroll>\r\n          </ErrorBoundary>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Main);\r\n","import { \r\n    changeSearchField,\r\n    requestRobots_Pending,\r\n    requestRobots_Success,\r\n    requestRobots_Failed\r\n } from './constants.redux';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: changeSearchField,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispath) => {\r\n    dispath({ type: requestRobots_Pending});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispath({ type: requestRobots_Success, payload: data }))\r\n        .catch(error => dispath({ type: requestRobots_Failed, payload: error }));\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport { ConfigureStore } from './redux/configureStore';\n\nimport './index.css';\nimport 'tachyons';\n\nimport Main from './components/MainComponent';\n\nconst store = ConfigureStore();\n\nReactDOM.render(<Provider store={ store }><Main/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}